// Decompiled with JetBrains decompiler
// Type: AutoP2P.SettingsControl
// Assembly: AutoP2P, Version=0.2.0.0, Culture=neutral, PublicKeyToken=null
// MVID: CC697889-314E-4AC3-AA15-73608EE9E5AD
// Assembly location: C:\Users\Kimee\Desktop\AutoP2P.dll

using Newtonsoft.Json;
using SimHub;
using SimHub.Plugins;
using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Windows;
using System.Windows.Forms;
using System.Windows.Markup;

namespace AutoP2P
{
  public class SettingsControl : System.Windows.Controls.UserControl, IComponentConnector
  {
    private readonly AutoP2P.AutoP2P AutoP2P;
    internal System.Windows.Controls.Button JSONButton_Load;
    internal System.Windows.Controls.Button JSONButton_Save;
    internal System.Windows.Controls.Button JSONButton_Export;
    internal System.Windows.Controls.Button clear_Profile;
    private bool _contentLoaded;

    public SettingsControl() => this.InitializeComponent();

    public SettingsControl(AutoP2P.AutoP2P AutoP2P, int mapUsed)
      : this()
    {
      this.AutoP2P = AutoP2P;
      this.DataContext = (object) AutoP2P.SettingsRoot;
      AutoP2P.PropertyChanged += new PropertyChangedEventHandler(this.AutoP2P_PropertyChanged);
    }

    private void AutoP2P_PropertyChanged(object sender, PropertyChangedEventArgs e)
    {
      int num = e.PropertyName == "mapUsed" ? 1 : 0;
    }

    private void JSONButton_Load_Click(object sender, RoutedEventArgs e)
    {
      using (OpenFileDialog openFileDialog = new OpenFileDialog())
      {
        openFileDialog.InitialDirectory = "c:\\";
        openFileDialog.Filter = "Json files (*.json)|*.json";
        openFileDialog.FilterIndex = 2;
        openFileDialog.RestoreDirectory = true;
        if (openFileDialog.ShowDialog() != DialogResult.OK)
          return;
        this.AutoP2P.SettingsRoot.Map.Clear();
        this.AutoP2P.fileLoad(openFileDialog);
        Logging.Current.Info((object) ("Profile loaded: " + Path.GetFileNameWithoutExtension(openFileDialog.FileName)));
      }
    }

    private void JSONButton_Save_Click(object sender, RoutedEventArgs e)
    {
      IPluginExtensions.SaveCommonSettings<AutoP2PSettings.Root>((IPlugin) this.AutoP2P, "Settings", this.AutoP2P.SettingsRoot);
      Logging.Current.Info((object) ("Profile saved: " + this.AutoP2P.SettingsRoot.profileName));
    }

    private void JSONButton_Export_Click(object sender, RoutedEventArgs e)
    {
      using (SaveFileDialog saveFileDialog = new SaveFileDialog())
      {
        saveFileDialog.InitialDirectory = "c:\\";
        saveFileDialog.Filter = "Json files (*.json)|*.json";
        saveFileDialog.FilterIndex = 2;
        saveFileDialog.RestoreDirectory = true;
        if (saveFileDialog.ShowDialog() != DialogResult.OK)
          return;
        string contents = JsonConvert.SerializeObject((object) this.AutoP2P.SettingsRoot, (Formatting) 1, new JsonSerializerSettings()
        {
          ReferenceLoopHandling = (ReferenceLoopHandling) 2
        });
        File.WriteAllText(saveFileDialog.FileName, contents);
        Logging.Current.Info((object) ("Profile exported correctly to: " + saveFileDialog.FileName));
      }
    }

    private void clear_Profile_Click(object sender, RoutedEventArgs e)
    {
      this.AutoP2P.SettingsRoot = new AutoP2PSettings.Root(true);
      Logging.Current.Info((object) "Profile cleared");
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    public void InitializeComponent()
    {
      if (this._contentLoaded)
        return;
      this._contentLoaded = true;
      System.Windows.Application.LoadComponent((object) this, new Uri("/AutoP2P;component/settingscontrol.xaml", UriKind.Relative));
    }

    [DebuggerNonUserCode]
    [GeneratedCode("PresentationBuildTasks", "4.0.0.0")]
    [EditorBrowsable(EditorBrowsableState.Never)]
    void IComponentConnector.Connect(int connectionId, object target)
    {
      switch (connectionId)
      {
        case 1:
          this.JSONButton_Load = (System.Windows.Controls.Button) target;
          this.JSONButton_Load.Click += new RoutedEventHandler(this.JSONButton_Load_Click);
          break;
        case 2:
          this.JSONButton_Save = (System.Windows.Controls.Button) target;
          this.JSONButton_Save.Click += new RoutedEventHandler(this.JSONButton_Save_Click);
          break;
        case 3:
          this.JSONButton_Export = (System.Windows.Controls.Button) target;
          this.JSONButton_Export.Click += new RoutedEventHandler(this.JSONButton_Export_Click);
          break;
        case 4:
          this.clear_Profile = (System.Windows.Controls.Button) target;
          this.clear_Profile.Click += new RoutedEventHandler(this.clear_Profile_Click);
          break;
        default:
          this._contentLoaded = true;
          break;
      }
    }
  }
}
